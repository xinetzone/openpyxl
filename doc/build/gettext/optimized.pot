# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2022, See AUTHORS
# This file is distributed under the same license as the openpyxl package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: openpyxl 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-29 09:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../optimized.rst:2
msgid "Optimised Modes"
msgstr ""

#: ../../optimized.rst:6
msgid "Read-only mode"
msgstr ""

#: ../../optimized.rst:8
msgid "Sometimes, you will need to open or write extremely large XLSX files, and the common routines in openpyxl won't be able to handle that load. Fortunately, there are two modes that enable you to read and write unlimited amounts of data with (near) constant memory consumption."
msgstr ""

#: ../../optimized.rst:13
msgid "Introducing :class:`openpyxl.worksheet._read_only.ReadOnlyWorksheet`::"
msgstr ""

#: ../../optimized.rst:28
msgid ":class:`openpyxl.worksheet._read_only.ReadOnlyWorksheet` is read-only"
msgstr ""

#: ../../optimized.rst:30
msgid "Unlike a normal workbook, a read-only workbook will use lazy loading. The workbook must be explicitly closed with the :func:`close()` method."
msgstr ""

#: ../../optimized.rst:33
msgid "Cells returned are not regular :class:`openpyxl.cell.cell.Cell` but :class:`openpyxl.cell._read_only.ReadOnlyCell`."
msgstr ""

#: ../../optimized.rst:38
msgid "Worksheet dimensions"
msgstr ""

#: ../../optimized.rst:40
msgid "Read-only mode relies on applications and libraries that created the file providing correct information about the worksheets, specifically the used part of it, known as the dimensions. Some applications set this incorrectly. You can check the apparent dimensions of a worksheet using `ws.calculate_dimension()`. If this returns a range that you know is incorrect, say `A1:A1` then simply resetting the max_row and max_column attributes should allow you to work with the file::"
msgstr ""

#: ../../optimized.rst:52
msgid "Write-only mode"
msgstr ""

#: ../../optimized.rst:54
msgid "Here again, the regular :class:`openpyxl.worksheet.worksheet.Worksheet` has been replaced by a faster alternative, the :class:`openpyxl.worksheet._write_only.WriteOnlyWorksheet`. When you want to dump large amounts of data make sure you have `lxml` installed."
msgstr ""

#: ../../optimized.rst:71
msgid "If you want to have cells with styles or comments then use a :func:`openpyxl.cell.WriteOnlyCell`"
msgstr ""

#: ../../optimized.rst:88
msgid "This will create a write-only workbook with a single sheet, and append a row of 3 cells: one text cell with a custom font and a comment, a floating-point number, and an empty cell (which will be discarded anyway)."
msgstr ""

#: ../../optimized.rst:95
msgid "Unlike a normal workbook, a newly-created write-only workbook does not contain any worksheets; a worksheet must be specifically created with the :func:`create_sheet()` method."
msgstr ""

#: ../../optimized.rst:99
msgid "In a write-only workbook, rows can only be added with :func:`append()`. It is not possible to write (or read) cells at arbitrary locations with :func:`cell()` or :func:`iter_rows()`."
msgstr ""

#: ../../optimized.rst:103
msgid "It is able to export unlimited amount of data (even more than Excel can handle actually), while keeping memory usage under 10Mb."
msgstr ""

#: ../../optimized.rst:106
msgid "A write-only workbook can only be saved once. After that, every attempt to save the workbook or append() to an existing worksheet will raise an :class:`openpyxl.utils.exceptions.WorkbookAlreadySaved` exception."
msgstr ""

#: ../../optimized.rst:111
msgid "Everything that appears in the file before the actual cell data must be created before cells are added because it must written to the file before then. For example, `freeze_panes` should be set before cells are added."
msgstr ""
