# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2022, See AUTHORS
# This file is distributed under the same license as the openpyxl package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: openpyxl 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-29 09:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../development.rst:2
msgid "Development"
msgstr ""

#: ../../development.rst:4
msgid ""
"If you find the openpyxl project intriguing and want to contribute a new "
"awesome feature, fix a nasty bug or improve the documentation this "
"section will guide you in setting up your development environment."
msgstr ""

#: ../../development.rst:8
msgid ""
"We will look into the coding standards and version control system "
"workflows used, as well as cloning the openpyxl code to your local "
"machine, setting up a virtual Python environment, running tests and "
"building the documentation."
msgstr ""

#: ../../development.rst:14
msgid "Getting the source"
msgstr ""

#: ../../development.rst:16
msgid ""
"The source code of openpyxl is hosted on `Heptapod "
"<https://foss.heptapod.net/openpyxl/openpyxl>`_ as a Mercurial project "
"which you can download using e.g. the GUI client `SourceTree "
"<http://www.sourcetreeapp.com>`_ by Atlassian. If you prefer working with"
" the command line you can use the following:"
msgstr ""

#: ../../development.rst:26
msgid ""
"Please note that the default branch should never be used for development "
"work. For bug fixes and minor patches you should base your work on the "
"branch of the current release, e.g |version|. New features should "
"generally be based on the development branch of the **next** minor "
"version. If in doubt get in touch with the openpyxl development team."
msgstr ""

#: ../../development.rst:32
msgid ""
"It is worthwhile to add an upstream remote reference to the original "
"repository to update your fork with the latest changes, by adding to the "
":code:`./hg/hgrc` file the following::"
msgstr ""

#: ../../development.rst:40
msgid "You can then grab any new changes using::"
msgstr ""

#: ../../development.rst:44
msgid ""
"After that you should create a virtual environment using "
":code:`virtualenv` and install the project requirements and the project "
"itself::"
msgstr ""

#: ../../development.rst:50
msgid "Activate the environment using::"
msgstr ""

#: ../../development.rst:54
msgid "Install the dev and prod dependencies and the package itself using::"
msgstr ""

#: ../../development.rst:61
msgid "Running tests"
msgstr ""

#: ../../development.rst:63
msgid ""
"Note that contributions to the project without tests will **not** be "
"accepted."
msgstr ""

#: ../../development.rst:65
msgid ""
"We use :code:`pytest` as the test runner with :code:`pytest-cov` for "
"coverage information and :code:`pytest-flakes` for static code analysis."
msgstr ""

#: ../../development.rst:68
msgid "To run all the tests you need to either execute::"
msgstr ""

#: ../../development.rst:72
msgid ""
"Or use :code:`tox` to run the tests on different Python versions and "
"configurations::"
msgstr ""

#: ../../development.rst:79
msgid "Coverage"
msgstr ""

#: ../../development.rst:81
#, python-format
msgid ""
"The goal is 100 % coverage for unit tests - data types and utility "
"functions. Coverage information can be obtained using::"
msgstr ""

#: ../../development.rst:88
msgid "Organisation"
msgstr ""

#: ../../development.rst:90
msgid ""
"Tests should be preferably at package / module level e.g "
":code:`openpyxl/cell`. This makes testing and getting statistics for code"
" under development easier::"
msgstr ""

#: ../../development.rst:97
msgid "Checking XML"
msgstr ""

#: ../../development.rst:99
msgid ""
"Use the :code:`openpyxl.tests.helper.compare_xml` function to compare "
"generated and expected fragments of XML."
msgstr ""

#: ../../development.rst:104
msgid "Schema validation"
msgstr ""

#: ../../development.rst:106
msgid ""
"When working on code to generate XML it is possible to validate that the "
"generated XML conforms to the published specification. Note, this won't "
"necessarily guarantee that everything is fine but is preferable to "
"reverse engineering!"
msgstr ""

#: ../../development.rst:113
msgid "Microsoft Tools"
msgstr ""

#: ../../development.rst:115
msgid ""
"Along with the SDK, Microsoft also has a `\"Productivity Tool\" "
"<http://www.microsoft.com/en-us/download/details.aspx?id=30425>`_ for "
"working with Office OpenXML."
msgstr ""

#: ../../development.rst:119
msgid ""
"This allows you to quickly inspect or compare whole Excel files. "
"Unfortunately, validation errors contain many false positives. The tool "
"also contain links to the specification and implementers' notes."
msgstr ""

#: ../../development.rst:125
msgid "File Support and Specifications"
msgstr ""

#: ../../development.rst:127
msgid ""
"The primary aim of openpyxl is to support reading and writing Microsoft "
"Excel 2010 files. These are zipped OOXML files that are specified by "
"`ECMA 376 <http://www.ecma-"
"international.org/publications/standards/Ecma-376.htm>`_ and `ISO 29500 "
"<http://standards.iso.org/ittf/PubliclyAvailableStandards/index.html>`_."
msgstr ""

#: ../../development.rst:132
msgid ""
"Where possible we try to support files generated by other libraries or "
"programs, but can't guarantee it, because often these do not strictly "
"adhere to the above format."
msgstr ""

#: ../../development.rst:138
msgid "Support of Python Versions"
msgstr ""

#: ../../development.rst:140
msgid "Python 3.6 and upwards are supported"
msgstr ""

#: ../../development.rst:144
msgid "Coding style"
msgstr ""

#: ../../development.rst:146
msgid ""
"We orient ourselves at PEP-8 for the coding style, except when "
"implementing attributes for roundtripping. Despite that you are "
"encouraged to use Python data conventions (boolean, None, etc.). Note "
"exceptions from this convestion in docstrings."
msgstr ""

#: ../../development.rst:153
msgid "Contributing"
msgstr ""

#: ../../development.rst:155
msgid ""
"Contributions in the form of pull requests are always welcome. Don't "
"forget to add yourself to the list of authors!"
msgstr ""

#: ../../development.rst:160
msgid "Branch naming convention"
msgstr ""

#: ../../development.rst:162
msgid ""
"We use a \"major.minor.patch\" numbering system, ie. |release|. "
"Development branches are named after \"major.minor\" releases. In "
"general, API change will only happen major releases but there will be "
"exceptions. Always communicate API changes to the mailing list before "
"making them. If you are changing an API try and an implement a fallback "
"(with deprecation warning) for the old behaviour."
msgstr ""

#: ../../development.rst:169
msgid ""
"The \"default branch\" is used for releases and always has changes from a"
" development branch merged in. It should never be the target for a pull "
"request."
msgstr ""

#: ../../development.rst:175
msgid "Pull Requests"
msgstr ""

#: ../../development.rst:177
msgid ""
"Pull requests should be submitted to the current, unreleased development "
"branch. Eg. if the current release is |release|, pull requests should be "
"made to the |version| branch. Exceptions are bug fixes to released "
"versions which should be made to the relevant release branch and merged "
"upstream into development."
msgstr ""

#: ../../development.rst:183
msgid ""
"Please use :code:`tox` to test code for different submissions **before** "
"making a pull request. This is especially important for picking up "
"problems across Python versions."
msgstr ""

#: ../../development.rst:189
msgid "Documentation"
msgstr ""

#: ../../development.rst:191
msgid ""
"Remember to update the documentation when adding or changing features. "
"Check that documentation is syntactically correct.::"
msgstr ""

#: ../../development.rst:198
msgid "Benchmarking"
msgstr ""

#: ../../development.rst:200
msgid ""
"Benchmarking and profiling are ongoing tasks. Contributions to these are "
"very welcome as we know there is a lot to do."
msgstr ""

#: ../../development.rst:205
msgid "Memory Use"
msgstr ""

#: ../../development.rst:207
msgid ""
"There is a tox profile for long-running memory benchmarks using the "
"`memory_utils` package.::"
msgstr ""

#: ../../development.rst:214
msgid "Pympler"
msgstr ""

#: ../../development.rst:216
msgid ""
"As openpyxl does not include any internal memory benchmarking tools, the "
"python *pympler* package was used during the testing of styles to profile"
" the memory usage in :code:`openpyxl.reader.excel.read_style_table()`::"
msgstr ""

#: ../../development.rst:235
msgid ""
":code:`pympler.summary.print_()` prints to the console a report of object"
" memory usage, allowing the comparison of different methods and "
"examination of memory usage. A useful future development would be to "
"construct a benchmarking package to measure the performance of different "
"components."
msgstr ""

