# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 - 2022, See AUTHORS
# This file is distributed under the same license as the openpyxl package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: openpyxl 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-29 09:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../formula.rst:2
msgid "Parsing Formulas"
msgstr ""

#: ../../formula.rst:4
msgid ""
"`openpyxl` supports limited parsing of formulas embedded in cells. The "
"`openpyxl.formula` package contains a `Tokenizer` class to break formulas"
" into their consitutuent tokens. Usage is as follows:"
msgstr ""

#: ../../formula.rst:25
msgid "As shown above, tokens have three attributes of interest:"
msgstr ""

#: ../../formula.rst:27
msgid "``.value``: The substring of the formula that produced this token"
msgstr ""

#: ../../formula.rst:29
msgid "``.type``: The type of token this represents. Can be one of"
msgstr ""

#: ../../formula.rst:31
msgid ""
"``Token.LITERAL``: If the cell does not contain a formula, its value is "
"represented by a single ``LITERAL`` token."
msgstr ""

#: ../../formula.rst:34
msgid ""
"``Token.OPERAND``: A generic term for any value in the Excel formula. "
"(See ``.subtype`` below for more details)."
msgstr ""

#: ../../formula.rst:37
msgid ""
"``Token.FUNC``: Function calls are broken up into tokens for the opener "
"(e.g., ``SUM(``), followed by the arguments, followed by the closer "
"(i.e., ``)``). The function name and opening parenthesis together form "
"one ``FUNC`` token, and the matching parenthesis forms another ``FUNC`` "
"token."
msgstr ""

#: ../../formula.rst:43
msgid ""
"``Token.ARRAY``: Array literals (enclosed between curly braces) get two "
"``ARRAY`` tokens each, one for the opening ``{`` and one for the closing "
"``}``."
msgstr ""

#: ../../formula.rst:47
msgid ""
"``Token.PAREN``: When used for grouping subexpressions (and not to denote"
" function calls), parentheses are tokenized as ``PAREN`` tokens (one per "
"character)."
msgstr ""

#: ../../formula.rst:51
msgid ""
"``Token.SEP``: These tokens are created from either commas (``,``) or "
"semicolons (``;``). Commas create ``SEP`` tokens when they are used to "
"separate function arguments (e.g., ``SUM(a,b)``) or when they are used to"
" separate array elements (e.g., ``{a,b}``). (They have another use as an "
"infix operator for joining ranges). Semicolons are always used to "
"separate rows in an array literal, so always create ``SEP`` tokens."
msgstr ""

#: ../../formula.rst:59
msgid ""
"``Token.OP_PRE``: Designates a prefix unary operator. Its value is always"
" ``+`` or ``-``"
msgstr ""

#: ../../formula.rst:62
msgid ""
"``Token.OP_IN``: Designates an infix binary operator. Possible values are"
" ``>=``, ``<=``, ``<>``, ``=``, ``>``, ``<``, ``*``, ``/``, ``+``, ``-``,"
" ``^``, or ``&``."
msgstr ""

#: ../../formula.rst:66
msgid ""
"``Token.OP_POST``: Designates a postfix unary operator. Its value is "
"always ``%``."
msgstr ""

#: ../../formula.rst:69
msgid ""
"``Token.WSPACE``: Created for any whitespace encountered. Its value is "
"always a single space, regardless of how much whitespace is found."
msgstr ""

#: ../../formula.rst:73
msgid ""
"``.subtype``: Some of the token types above use the subtype to provide "
"additional information about the token. Possible subtypes are:"
msgstr ""

#: ../../formula.rst:77
msgid ""
"``Token.TEXT``, ``Token.NUMBER``, ``Token.LOGICAL``, ``Token.ERROR``, "
"``Token.RANGE``: these subtypes describe the various forms of ``OPERAND``"
" found in formulae. ``LOGICAL`` is either ``TRUE`` or ``FALSE``, "
"``RANGE`` is either a named range or a direct reference to another range."
" ``TEXT``, ``NUMBER``, and ``ERROR`` all refer to literal values in the "
"formula"
msgstr ""

#: ../../formula.rst:84
msgid ""
"``Token.OPEN`` and ``Token.CLOSE``: these two subtypes are used by "
"``PAREN``, ``FUNC``, and ``ARRAY``, to describe whether the token is "
"opening a new subexpression or closing it."
msgstr ""

#: ../../formula.rst:88
msgid ""
"``Token.ARG`` and ``Token.ROW``: are used by the ``SEP`` tokens, to "
"distinguish between the comma and semicolon. Commas produce tokens of "
"subtype ``ARG`` whereas semicolons produce tokens of subtype ``ROW``"
msgstr ""

#: ../../formula.rst:95
msgid "Translating formulae from one location to another"
msgstr ""

#: ../../formula.rst:98
msgid ""
"It is possible to translate (in the mathematical sense) formulae from one"
" location to another using the "
":class:`openpyxl.formulas.translate.Translator` class. For example, there"
" a range of cells ``B2:E7`` with a sum of each row in column ``F``::"
msgstr ""

#: ../../formula.rst:112
msgid ""
"This is limited to the same general restrictions of formulae: `A1` cell-"
"references only and no support for defined names."
msgstr ""

